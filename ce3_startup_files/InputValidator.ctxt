#BlueJ class context
comment0.target=InputValidator
comment0.text=\n\ This\ is\ the\ InputValidator\ class.\ \n\ This\ class\ including\ methods\ to\ test\ cases\ in\ the\ InputValidationTest\ class.\ \n
comment1.params=password
comment1.target=boolean\ valPassword(java.lang.String)
comment10.params=phoneNum
comment10.target=boolean\ isPhoneNumValid(java.lang.String)
comment10.text=\n\ The\ isValidPhoneNum\ method\ use\ it\ to\ validate\ a\ phone\ number\ string\ based\ on\ specific\ rules.\ \n\ Validates\ a\ phone\ number\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ contain\ 10\ digits\n\ -\ May\ include\ dashes\ or\ spaces.\ \n\ -\ Can\ be\ empty.\n\n
comment11.params=dob
comment11.target=boolean\ validateDateOfBirth(java.lang.String)
comment12.params=dob
comment12.target=boolean\ dateOfBirthIsValid(java.lang.String)
comment12.text=\n\ Validates\ Date\ of\ Birth\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ a\ valid\ date\ in\ the\ format\ yyyy-MM-dd\n\ -\ User\ must\ be\ 18+\ years\ old.\ \n\ -\ Should\ not\ be\ empty.\n\ \n\ @param\ dob\ the\ date\ of\ birth\ to\ validate\ the\ age\ of\ the\ users\ is\ above\ 18.\n\ @return\ true\ if\ the\ date\ of\ birth\ is\ valid\ and\ user\ is\ 18+\ years\ old,\ false\ otherwise\n\ @throws\ DateTimeParseException\ if\ the\ date\ format\ is\ invalid\n\ @throws\ IllegalArgumentException\ if\ the\ date\ is\ in\ the\ future\n
comment13.params=zipCode
comment13.target=boolean\ isZipCodeValid(java.lang.String)
comment13.text=\n\ Validates\ Date\ of\ Birth\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ exactly\ 5\ digits\ (only\ for\ the\ U.S.A.).\ \n\ -\ Can\ be\ empty\ if\ the\ postal\ code\ is\ from\ another\ country.\n\ \n\ @param\ postalCode\ the\ postal\ code\ to\ validate\n\ @return\ true\ if\ the\ postal\ code\ is\ valid,\ false\ otherwise\n\ @throws\ IllegalArgumentException\ if\ the\ postal\ code\ is\ not\ a\ valid\ format\n\ @throws\ NullPointerException\ if\ the\ postal\ code\ is\ null\n\ @throws\ IllegalStateException\ if\ the\ postal\ code\ is\ not\ in\ the\ correct\ format\n\ @throws\ NumberFormatException\ if\ the\ postal\ code\ is\ not\ a\ number\n\ @throws\ StringIndexOutOfBoundsException\ if\ the\ postal\ code\ is\ not\ a\ valid\ length\n\ @throws\ ArrayIndexOutOfBoundsException\ if\ the\ postal\ code\ is\ not\ a\ valid\ length\ \ \n
comment14.params=description
comment14.target=boolean\ isValidDescription(java.lang.String)
comment15.params=creationDate
comment15.target=boolean\ validateCreationDate(java.lang.String)
comment16.params=price
comment16.target=boolean\ isValidPrice(java.lang.String)
comment16.text=\n\ Validates\ that\ the\ price\ is\ either\ empty\ or\ matches\ valid\ currency\ format.\n\n\ @param\ price\ the\ price\ as\ a\ string\ (can\ be\ USD,\ EUR,\ BTC)\n\ @return\ true\ if\ valid\ or\ empty,\ false\ if\ invalid\n
comment2.params=password
comment2.target=boolean\ checkPass(java.lang.String)
comment3.params=medium
comment3.target=boolean\ isValidMedium(java.lang.String)
comment3.text=\n\ Validates\ that\ the\ medium\ is\ not\ empty\ and\ is\ among\ accepted\ options.\n\n\ @param\ medium\ the\ medium\ used\ in\ the\ artwork\n\ @return\ true\ if\ valid,\ false\ otherwise\n
comment4.params=name
comment4.target=boolean\ validateName(java.lang.String)
comment4.text=\n\ Validates\ a\ name\ based\ on\ the\ following\ requirements\:\n\ -\ Can\ contain\ letters\ and\ spaces.\n\ -\ Must\ be\ at\ least\ 2\ characters\ long.\n\ -\ May\ include\ diacritic\ marks.\n\ -\ Must\ not\ be\ null\ or\ empty.\n\n\ @param\ name\ the\ name\ to\ validate\n\ @return\ true\ if\ the\ name\ is\ valid,\ false\ otherwise\n
comment5.params=date
comment5.target=boolean\ isValidCreationDate(java.lang.String)
comment5.text=\n\ Validates\ a\ creation\ date\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ in\ the\ format\ yyyy-MM-dd.\n\ -\ Must\ not\ be\ null\ or\ empty.\n\n\ @param\ date\ the\ creation\ date\ to\ validate\n\ @return\ true\ if\ the\ date\ is\ valid,\ false\ otherwise\n
comment6.params=lastName
comment6.target=boolean\ validateLastName(java.lang.String)
comment6.text=\n\ Validates\ a\ last\ name\ based\ on\ the\ following\ requirements\:\n\ -\ Can\ contain\ letters,\ spaces,\ and\ dashes.\n\ -\ Must\ be\ at\ least\ 2\ characters\ long.\n\ -\ May\ include\ diacritic\ marks.\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ It\ cannot\ start\ or\ end\ with\ a\ dash.\n\n\ @param\ lastName\ the\ last\ name\ to\ validate\n\ @return\ true\ if\ the\ last\ name\ is\ valid,\ false\ otherwise\n
comment7.params=email
comment7.target=boolean\ validateEmail(java.lang.String)
comment7.text=\n\ Validates\ an\ email\ address\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ follow\ a\ valid\ email\ format\ (e.g.,\ name@example.com).\n\n\ @param\ email\ the\ email\ address\ to\ validate\n\ @return\ true\ if\ the\ email\ is\ valid,\ false\ otherwise\n
comment8.params=username
comment8.target=boolean\ validateUsername(java.lang.String)
comment8.text=\n\ Validates\ a\ username\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ not\ exceed\ 20\ characters\ in\ length.\n\ -\ May\ contain\ only\ letters,\ numbers,\ underscores,\ and\ dots.\n\n\ @param\ username\ the\ username\ to\ validate\n\ @return\ true\ if\ the\ username\ meets\ all\ requirements,\ false\ otherwise\n
comment9.params=username\ existingUsernames
comment9.target=boolean\ isUsernameUnique(java.lang.String,\ java.util.Set)
comment9.text=\n\ Checks\ whether\ the\ given\ username\ is\ unique\ by\ comparing\ it\ to\ a\ list\ of\ existing\ usernames.\n\n\ @param\ username\ the\ username\ to\ check\n\ @param\ existingUsernames\ the\ list\ of\ usernames\ already\ in\ use\n\ @return\ true\ if\ the\ username\ is\ unique,\ false\ otherwise\n\n
numComments=17
