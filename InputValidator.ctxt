#BlueJ class context
comment0.target=InputValidator
comment0.text=\n\ The\ InputValidator\ class\ provides\ static\ utility\ methods\ to\ validate\n\ various\ types\ of\ user\ input\ such\ as\ password,\ description,\ creation\ date,\n\ price,\ medium,\ last\ name,\ email,\ username,\ phone\ number,\ DOB,\ postal\ code,\ \n\ description\ Methods\ include\ proper\ JavaDoc\ and\ in-line\ code\ comments\ for\n\ better\ readability\ and\ maintenance.\n
comment1.params=name
comment1.target=boolean\ validateName(java.lang.String)
comment1.text=\n\ Validates\ a\ name\ based\ on\ the\ following\ requirements\:\n\ -\ Can\ contain\ letters\ and\ spaces.\n\ -\ Must\ be\ at\ least\ 2\ characters\ long.\n\ -\ May\ include\ diacritic\ marks.\n\ -\ Must\ not\ be\ null\ or\ empty.\n\n\ @param\ name\ the\ name\ to\ validate\n\ @return\ true\ if\ the\ name\ is\ valid,\ false\ otherwise\n
comment10.params=postalCode\ USAcode
comment10.target=boolean\ isPostalCodeValid(java.lang.String,\ boolean)
comment10.text=\n\ Validates\ the\ postal\ code\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ exactly\ 5\ digits\ (only\ for\ the\ U.S.A.).\ \n\ -\ Can\ be\ empty\ if\ the\ postal\ code\ is\ from\ another\ country.\n\ \n\ @param\ postalCode\ \n\ @param\ USAcode\ true\ if\ the\ address\ is\ in\ the\ U.S.A.,\ false\ otherwise.\n\ @return\ true\ if\ the\ ZIP\ code\ is\ valid.\n\ @throws\ NumberFormatException\ if\ the\ postal\ code\ is\ not\ a\ number.\n
comment11.params=title
comment11.target=boolean\ checkTitle(java.lang.String)
comment11.text=\n\ Validates\ whether\ the\ title\ is\ valid\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ be\ less\ than\ 100\ characters\ long.\n\n\ @param\ title\ the\ title\ of\ the\ artwork\ to\ validate\n\ @return\ true\ if\ the\ title\ is\ valid,\ false\ otherwise\n
comment12.params=description
comment12.target=boolean\ isValidDescription(java.lang.String)
comment12.text=\n\ Validates\ whether\ the\ description\ is\ valid\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ not\ exceed\ 1000\ characters.\n\ \n\ @param\ description\ the\ description\ text\ to\ validate\n\ @return\ true\ if\ the\ description\ is\ non-null,\ non-empty,\ and\ within\ the\ character\ limit;\ false\ otherwise\n
comment13.params=file
comment13.target=boolean\ isValidImage(java.io.File)
comment13.text=\n\ Validates\ whether\ the\ image\ is\ valid\ based\ on\ the\ following\ requirements\:\n\ -\ File\ must\ not\ be\ null\ and\ must\ exist.\n\ -\ File\ extension\ must\ be\ .jpg,\ .jpeg,\ or\ .png\ (case-insensitive).\n\ -\ File\ size\ must\ be\ 4MB\ or\ less\n\ \n\ @param\ file\ the\ image\ file\ to\ validate\n\ @return\ true\ if\ the\ file\ is\ a\ valid\ image\ with\ correct\ extension\ and\ within\ size\ limits,\ false\ otherwise.\ \n
comment14.params=dimensions
comment14.target=boolean\ isValidDimensions(java.lang.String)
comment14.text=\n\ Validates\ whether\ the\ dimension\ is\ valid\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ follow\ the\ format\:\ width\ x\ height\ [unit],\ such\ as\ "20x30\ inches"\ or\ "0.5\ x\ 1.2\ meter".\n\ -\ Accepted\ units\:\ inches,\ inch,\ feet,\ foot,\ ft,\ meter,\ m,\ cm.\n\n\ @param\ dimensions\ the\ dimension\ string\ to\ validate\n\ @return\ true\ if\ the\ dimensions\ string\ is\ valid,\ false\ otherwise\n
comment15.params=medium
comment15.target=boolean\ isValidMedium(java.lang.String)
comment15.text=\n\ Validates\ whether\ the\ medium\ is\ one\ of\ the\ accepted\ media\ types\ based\ on\ the\ following\ requirements\:\n\ -\ Should\ be\ one\ of\ the\ accepted\ media\ (the\ field\ for\ a\ painting\ medium\ is\ a\ dropdown\ menu).\ \n\ -\ Should\ not\ be\ empty.\n\n\ @param\ medium\ the\ medium\ used\ in\ the\ artwork\ (e.g.,\ "oil",\ "acrylic")\n\ @return\ true\ if\ the\ medium\ is\ valid,\ false\ otherwise\n\ \n
comment16.params=date
comment16.target=boolean\ validateCreationDate(java.lang.String)
comment16.text=\n\ Validates\ a\ creation\ date\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ in\ the\ format\ yyyy-MM-dd.\n\ -\ Must\ not\ be\ null\ or\ empty.\ \n\n\ @param\ date\ the\ string\ representation\ of\ the\ creation\ date\n\ @return\ true\ if\ the\ date\ is\ valid,\ false\ otherwise\n
comment17.params=price
comment17.target=boolean\ isValidPrice(java.lang.String)
comment17.text=\n\ Validates\ that\ the\ price\ is\ either\ empty\ or\ matches\ valid\ currency\ format.\n\n\ @param\ price\ the\ price\ as\ a\ string\ (can\ be\ USD,\ EUR,\ BTC)\n\ @return\ true\ if\ valid\ or\ empty,\ false\ if\ invalid\n
comment2.params=lastName
comment2.target=boolean\ validateLastName(java.lang.String)
comment2.text=\n\ Validates\ a\ last\ name\ based\ on\ the\ following\ requirements\:\n\ -\ Can\ contain\ letters,\ spaces,\ and\ dashes.\n\ -\ Must\ be\ at\ least\ 2\ characters\ long.\n\ -\ May\ include\ diacritic\ marks.\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ It\ cannot\ start\ or\ end\ with\ a\ dash.\n\n\ @param\ lastName\ the\ last\ name\ to\ validate\n\ @return\ true\ if\ the\ last\ name\ is\ valid,\ false\ otherwise\n
comment3.params=email
comment3.target=boolean\ validateEmail(java.lang.String)
comment3.text=\n\ Validates\ an\ email\ address\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ follow\ a\ basic\ structure\:\ local-part@domain,\ where\:\n\ \ \ +\ The\ local-part\ must\ not\ contain\ '@'\ or\ whitespace.\n\ \ \ +\ The\ domain\ must\ include\ at\ least\ one\ '.'\ and\ not\ contain\ '@'\ or\ whitespace.\n\n\n\ @param\ email\ the\ email\ address\ to\ validate\n\ @return\ true\ if\ the\ email\ is\ valid,\ false\ otherwise\n
comment4.params=username
comment4.target=boolean\ validateUsername(java.lang.String)
comment4.text=\n\ Validates\ a\ username\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ not\ be\ null\ or\ empty.\n\ -\ Must\ not\ exceed\ 20\ characters\ in\ length.\n\ -\ May\ contain\ only\ letters,\ numbers,\ underscores,\ and\ dots.\n\n\ @param\ username\ the\ username\ to\ validate.\n\ @return\ true\ if\ the\ username\ meets\ all\ requirements,\ false\ otherwise.\n
comment5.params=username\ existingUsernames
comment5.target=boolean\ isUsernameUnique(java.lang.String,\ java.util.List)
comment5.text=\n\ Checks\ whether\ the\ given\ username\ is\ unique\ by\ comparing\ it\ to\ a\ list\ of\ existing\ usernames.\n\n\ @param\ username\ the\ username\ to\ check\n\ @param\ existingUsernames\ the\ list\ of\ usernames\ already\ in\ use\n\ @return\ true\ if\ the\ username\ is\ unique,\ false\ otherwise\n\n
comment6.params=password
comment6.target=boolean\ valPassword(java.lang.String)
comment6.text=\n\ Validates\ a\ password\ based\ on\ the\ following\ criteria\:\n\ -\ Must\ be\ at\ least\ 8\ characters\ long.\n\ -\ Must\ contain\ at\ least\ one\ digit,\ one\ uppercase\ letter,\ and\ one\ lowercase\ letter.\n\ \n\ @param\ password\ the\ password\ to\ validate\n\ @return\ true\ if\ valid,\ false\ otherwise\n
comment7.params=password
comment7.target=boolean\ checkPass(java.lang.String)
comment7.text=\n\ Checks\ if\ a\ password\ contains\:\n\ -\ At\ least\ one\ digit\n\ -\ At\ least\ one\ uppercase\ letter\n\ -\ At\ least\ one\ lowercase\ letter\n\ \n\ @param\ password\ the\ password\ string\ to\ check\n\ @return\ true\ if\ all\ character\ type\ requirements\ are\ met;\ false\ otherwise\n
comment8.params=phoneNum
comment8.target=boolean\ isPhoneNumValid(java.lang.String)
comment8.text=\n\ Validates\ a\ phone\ number\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ contain\ 10\ digits.\n\ -\ May\ include\ dashes\ or\ spaces.\ \n\ -\ Can\ be\ empty.\n\n\ @param\ phoneNum\ the\ input\ phone\ number\ string\ to\ validate.\n\ @return\ true\ if\ the\ phone\ number\ is\ valid,\ false\ otherwise.\n
comment9.params=dob
comment9.target=boolean\ dateOfBirthIsValid(java.lang.String)
comment9.text=\n\ Validates\ the\ DOB\ based\ on\ the\ following\ requirements\:\n\ -\ Must\ be\ a\ valid\ date\ in\ the\ format\ yyyy-MM-dd\n\ -\ User\ must\ be\ 18+\ years\ old.\ \n\ -\ Should\ not\ be\ empty.\n\ \n\ @param\ ValidateS\ the\ DOB\ of\ the\ user\ is\ above\ the\ age\ of\ 18\ years.\n\ @return\ true\ if\ the\ date\ of\ birth\ is\ valid\ and\ the\ user\ is\ 18+\ years\ old,\ false\ otherwise.\n\ @throws\ DateTimeParseException\ if\ the\ date\ format\ is\ invalid.\n
numComments=18
